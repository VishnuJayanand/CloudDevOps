kind: pipeline
type: docker
name: default

steps:
- name: decrypt - managing secret solution files
  # cp. https://hub.docker.com/r/frapsoft/openssl
  image: frapsoft/openssl
  environment:
    KEY:
      from_secret: key
  commands:
  - openssl enc -d -aes-256-cbc -md sha256 -pass env:KEY -in ./${DRONE_BRANCH}/src.tar.enc -out ./${DRONE_BRANCH}/src.tar
  - tar -xvf ./${DRONE_BRANCH}/src.tar


- name: build all docker images needed
  image: docker
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - docker --version && cd ${DRONE_BRANCH}
  - docker build --quiet -t ${DRONE_BRANCH}.main -f Dockerfile.main.df .
  - docker --version && cd ../src
  - docker build --quiet -t ${DRONE_BRANCH}python.solution -f Dockerfile.python.df .

- name: server.local
  image: ${DRONE_BRANCH}.main
  pull: never
  detach: true
  commands:
  - nginx
  - ps -ax
#  - nginx -g "daemon off;error_log /dev/stdout debug;"
    # Note: The ssh daemon needs to be started manually since Drone seems to
    #       start containers as if with '-it' and '/bin/bash' command was used
  - /bin/bash -c 'while true ; do echo "$(service nginx status) on $(hostname -I)" ; sleep 1 ; done'
    # Note: The '-c' option is needed for bash to interpret the passed
    #       arguments as bash commands.

- name: check if main worked as expected
  image: ${DRONE_BRANCH}python.solution
  pull: never
  commands:
  - cd src
  - python check.py

volumes:
- name: dockersock
  host:
    path: /var/run/docker.sock

trigger:
  branch:
  - feature*